
handles.movieList = 'y:\DOL Calibration\Data\sigi\u-track\movieList_all.mat';
handles.matFilePath = 'y:\DOL Calibration\Data\sigi\analysis\sigi_base_1.2.mat';

handles.index = 1;

mainfig = figure('Name', handles.matFilePath,...
    'Position', [0 0 600 800],...
    'WindowKeyPressFcn', @KeyControl);
handles.ax = axes('Units', 'Normalized',...
    'Position', [0 0.15 1 0.78],...
    'XTick', '',...
    'XTickLabel', '');

handles.text = uicontrol('Parent', mainfig,...
    'Style', 'text',...
    'String', 'conditions',...
    'Units', 'Normalized',...
    'Position', [0.01 0.97 0.98 0.02]);

handles.dropExperiment = uicontrol('Parent', mainfig,...
    'Style', 'popupmenu',...
    'String', {'experiment', 'felix', 'klaus', 'sigi', 'wioleta'},...
    'Enable', 'off',...
    'Callback', @chooseCell,...
    'Units', 'Normalized',...
    'Position', [0.01 0.92 0.18 0.05]);
handles.dropCellType = uicontrol('Parent', mainfig,...
    'Style', 'popupmenu',...
    'String', {'gSEP', 'LynG'},...
    'Callback', @chooseCell,...
    'Units', 'Normalized',...
    'Position', [0.21 0.92 0.18 0.05]);
handles.dropIncubation = uicontrol('Parent', mainfig,...
    'Style', 'popupmenu',...
    'String', {0.25 0.5 1 3 16},...
    'Callback', @chooseCell,...
    'Units', 'Normalized',...
    'Position', [0.41 0.92 0.18 0.05]);
handles.dropConcentration = uicontrol('Parent', mainfig,...
    'Style', 'popupmenu',...
    'String', {0 0.1 1 5 10 50 100 250},...
    'Callback', @chooseCell,...
    'Units', 'Normalized',...
    'Position', [0.61 0.92 0.18 0.05]);
handles.dropReplicate = uicontrol('Parent', mainfig,...
    'Style', 'popupmenu',...
    'String', num2cell(1:20),...
    'Callback', @chooseCell,...
    'Units', 'Normalized',...
    'Position', [0.81 0.92 0.18 0.05]);

handles.back = uicontrol('Parent', mainfig,...
    'Style', 'pushbutton',...
    'String', 'back',...
    'Callback',{@push, 'back'},...
    'Units', 'Normalized',...
    'Position', [0.01 0.01 0.1 0.08]);
handles.next = uicontrol('Parent', mainfig,...
    'Style', 'pushbutton',...
    'String', 'next',...
    'Callback', {@push, 'next'},...
    'Units', 'Normalized',...
    'Position', [0.8 0.01 0.1 0.08]);
handles.goto = uicontrol('Parent', mainfig,...
    'Style', 'edit',...
    'String', '',...
    'Callback', @goToIndex,...
    'Units', 'Normalized',...
    'Position', [0.91 0.01 0.08 0.08]);

handles.blue_points = uicontrol('Parent', mainfig,...
    'Style', 'checkbox',...
    'String', 'Blue Points',...
    'Value', 0,...
    'Callback', @displayImage,...
    'Units', 'Normalized',...
    'Position', [0.12 0.05 0.2 0.04]);
handles.blue_img = uicontrol('Parent', mainfig,...
    'Style', 'checkbox',...
    'Value', 1,...
    'String', 'Blue Image',...
    'Callback', @displayImage,...
    'Units', 'Normalized',...
    'Position', [0.12 0.01 0.2 0.04]);

handles.green_points = uicontrol('Parent', mainfig,...
    'Style', 'checkbox',...
    'Value', 0,...
    'String', 'Green Points',...
    'Callback', @displayImage,...
    'Units', 'Normalized',...
    'Position', [0.36 0.05 0.25 0.04]);
handles.green_img = uicontrol('Parent', mainfig,...
    'Style', 'checkbox',...
    'Value', 1,...
    'String', 'Green Image',...
    'Callback', @displayImage,...
    'Units', 'Normalized',...
    'Position', [0.36 0.01 0.25 0.04]);

handles.red_points = uicontrol('Parent', mainfig,...
    'Style', 'checkbox',...
    'Value', 0,...
    'String', 'Red Points',...
    'Callback', @displayImage,...
    'Units', 'Normalized',...
    'Position', [0.59 0.05 0.2 0.04]);
handles.red_img = uicontrol('Parent', mainfig,...
    'Style', 'checkbox',...
    'Value', 1,...
    'String', 'Red Image',...
    'Callback', @displayImage,...
    'Units', 'Normalized',...
    'Position', [0.59 0.01 0.2 0.04]);


handles.blue_adj = uicontrol('Parent', mainfig,...
    'Style', 'slider',...
    'Value', 0.4,...
    'String', 'Contrast Blue',...
    'Callback', @displayImage,...
    'Units', 'Normalized',...
    'Position', [0.12 0.1 0.2 0.04]);
handles.green_adj = uicontrol('Parent', mainfig,...
    'Style', 'slider',...
    'Value', 0.17,...
    'String', 'Contrast Green',...
    'Callback', @displayImage,...
    'Units', 'Normalized',...
    'Position', [0.36 0.1 0.2 0.04]);
handles.red_adj = uicontrol('Parent', mainfig,...
    'Style', 'slider',...
    'Value', 0.3,...
    'String', 'Contrast Red',...
    'Callback', @displayImage,...
    'Units', 'Normalized',...
    'Position', [0.59 0.1 0.2 0.04]);

handles.points = load(handles.matFilePath, 'Points_Blue_x', 'Points_Blue_y',...
    'Points_Blue_A', 'Points_Green_x', 'Points_Green_y', 'Points_Green_A',...
    'Points_Red_x', 'Points_Red_y', 'Points_Red_A');
handles.dataSet = load(handles.matFilePath, 'CellType', 'incubation_time', ...
    'concentration', 'replicate');
load(handles.movieList, 'ML');
handles.movieDataPath = ML.movieDataFile_;

guidata(mainfig, handles);

displayImage();


function push(hObject, actiondata, answer)
    
    handles = guidata(gcbf);
    
    switch answer
        case 'next'
            handles.index = handles.index + 1;
        case 'back'
            handles.index = handles.index - 1;
    end
    guidata(gcbf, handles);
    
    displayImage();
    
end

function KeyControl(hObject, eventdata)

    Key = eventdata.Key;
    
    switch Key
        case 'y'
            push([], [], 'yes');
        case 'n'
            push([], [], 'no');
    end
        
end

function displayImage(varargin)
    
    handles = guidata(gcf);
    
    cla
    
    this_movieData = handles.movieDataPath{handles.index};
    fs = strfind(handles.movieDataPath{handles.index},filesep);
    this_fileNameStem = handles.movieDataPath{handles.index}(fs(end-1)+1:fs(end)-1);
    
    [CellType, incubation_time, concentration, replicate] = conditionsFromString(this_movieData);
    conditions = [CellType ' ' num2str(incubation_time) 'h ' num2str(concentration), 'nM ', num2str(replicate)];
    handles.dropCellType.Value = find(strcmp(handles.dropCellType.String, CellType));
    handles.dropIncubation.Value = find(strcmp(handles.dropIncubation.String, num2str(incubation_time)));
    handles.dropConcentration.Value = find(strcmp(handles.dropConcentration.String, num2str(concentration)));
    handles.dropReplicate.Value = find(strcmp(handles.dropReplicate.String, num2str(replicate)));
    handles.text.String = conditions;
    handles.goto.String = num2str(handles.index);
    
    [img_blue, img_green, img_red] = deal(zeros(512,512));
    
    if handles.blue_img.Value
        this_bluePath = strrep(this_movieData, 'movieData.mat', ...
            ['blue' filesep this_fileNameStem 'blue.tif']);
        img_blue = imread(this_bluePath);
    end
    if handles.green_img.Value
        this_greenPath = strrep(this_movieData, 'movieData.mat', ...
            ['green' filesep this_fileNameStem 'green.tif']);
        img_green = imread(this_greenPath);
    end
    if handles.red_img.Value
        this_redPath = strrep(this_movieData, 'movieData.mat', ...
            ['red' filesep this_fileNameStem 'red.tif']);
        img_red = imread(this_redPath);
    end
    
    rgbImage = cat(3, img_red,  img_green, img_blue);
    
    high_in = 0.1 * [handles.red_adj.Value handles.green_adj.Value handles.blue_adj.Value] + 0.0001;

    rgbImage_rescaled = imadjust(rgbImage,[0.003 0.0007 0.007; high_in],[]);
    image(rgbImage_rescaled);
    hold on
    
    if handles.blue_points.Value
        pbluex = handles.points.Points_Blue_x{handles.index};
        pbluey = handles.points.Points_Blue_y{handles.index};
        pblueA = handles.points.Points_Blue_A{handles.index};
        valid = pblueA > 800;
        plot(pbluex(valid), pbluey(valid), 'Marker', 'o', 'MarkerSize', 20, 'LineStyle', 'none', 'LineWidth', 1, 'Color', [0.6157 0.5882 1.0000]);
        plot(pbluex(~valid), pbluey(~valid), 'Marker', 'x', 'MarkerSize', 20, 'LineStyle', 'none', 'LineWidth', 1, 'Color', [0.6157 0.5882 1.0000]);
   end
    if handles.green_points.Value
        pgreenx = handles.points.Points_Green_x{handles.index};
        pgreeny = handles.points.Points_Green_y{handles.index};
        pgreenA = handles.points.Points_Green_A{handles.index};
        valid = pgreenA > 194.8499;
        plot(pgreenx(valid), pgreeny(valid), 'Marker', 'o', 'MarkerSize', 20, 'LineStyle', 'none', 'LineWidth', 1, 'Color', [0.5882 1.0000 0.6157]);
        plot(pgreenx(~valid), pgreeny(~valid), 'Marker', 'x', 'MarkerSize', 20, 'LineStyle', 'none', 'LineWidth', 1, 'Color', [0.5882 1.0000 0.6157]);
    end
    if handles.red_points.Value
        predx = handles.points.Points_Red_x{handles.index};
        predy = handles.points.Points_Red_y{handles.index};
        predA = handles.points.Points_Red_A{handles.index};
        valid = predA > 400;
        plot(predx(valid), predy(valid), 'Marker', 'o', 'MarkerSize', 20, 'LineStyle', 'none', 'LineWidth', 1, 'Color', [1.0000    0.6157    0.5882]);
        plot(predx(~valid), predy(~valid), 'Marker', 'x', 'MarkerSize', 20, 'LineStyle', 'none', 'LineWidth', 1, 'Color', [1.0000    0.6157    0.5882]);
    end
    
    ax = gca;
    ax.XTickLabel = '';
    

end

function goToIndex(hObject, eventdata)

    handles = guidata(gcbf);
    handles.index = str2num(hObject.String);
    
    guidata(gcf, handles);
    
    displayImage();
    
end

function chooseCell(varargin)

    handles = guidata(gcf);
    
    CellType = handles.dropCellType.String{handles.dropCellType.Value};
    incubation_time = str2num(handles.dropIncubation.String{handles.dropIncubation.Value});
    concentration = str2num(handles.dropConcentration.String{handles.dropConcentration.Value});
    replicate = str2num(handles.dropReplicate.String{handles.dropReplicate.Value});
    
    index = find(strcmp(CellType, handles.dataSet.CellType) &...
        handles.dataSet.incubation_time == incubation_time &...
        handles.dataSet.concentration == concentration &...
        handles.dataSet.replicate == replicate);
    
    if isempty(index)
        fprintf('No file with these properties\n');
    else
        handles.index = index;
        guidata(gcf, handles);
        displayImage;
    end

end

function closeWindow(varargin)
    
    handles = guidata(gcbf);
    
    button = questdlg('Save before closing?', '', 'Yes', 'No', 'Cancel', 'Cancel');
    
    switch button
        case 'Yes'
            saveData();
            delete(gcbf);
        case 'No'
            delete(gcbf);
        case 'Cancel'
            return
    end
    
end